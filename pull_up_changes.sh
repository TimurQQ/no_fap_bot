#!/usr/bin/env bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîÑ Starting deployment process...${NC}"

# 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo -e "${YELLOW}üì• Pulling latest changes from repository...${NC}"
git pull origin master

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Failed to pull changes from repository${NC}"
    exit 1
fi

# 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
echo -e "${YELLOW}üõë Stopping bot process...${NC}"
pkill -f "no_fap.py"
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Bot process stopped${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No running bot process found${NC}"
fi

# 3. –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã
echo -e "${YELLOW}üíæ Creating local backups...${NC}"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backup –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
mkdir -p backup

TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if [ -f "storage/all_scores_saved.json" ]; then
    cp storage/all_scores_saved.json "backup/all_scores_saved_${TIMESTAMP}.json"
    cp storage/all_scores_saved.json "backup/all_scores_saved.json"
    echo -e "${GREEN}‚úÖ Database backup: backup/all_scores_saved_${TIMESTAMP}.json${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Database file not found, skipping database backup${NC}"
fi

# –ë—ç–∫–∞–ø –º–µ–º–æ–≤
if [ -d "storage/memes" ]; then
    tar -czf "backup/memes_${TIMESTAMP}.tar.gz" -C storage memes
    tar -czf "backup/memes_latest.tar.gz" -C storage memes
    MEMES_COUNT=$(find storage/memes -type f | wc -l)
    echo -e "${GREEN}‚úÖ Memes backup: backup/memes_${TIMESTAMP}.tar.gz (${MEMES_COUNT} files)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Memes folder not found, skipping memes backup${NC}"
fi

# 4. –°–æ–∑–¥–∞–µ–º S3 –±—ç–∫–∞–ø
echo -e "${YELLOW}‚òÅÔ∏è  Creating S3 backup...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå .env file not found, skipping S3 backup${NC}"
else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ S3 –≤–∫–ª—é—á–µ–Ω
    S3_ENABLED=$(grep "^S3_ENABLED=" .env | cut -d'=' -f2)
    if [ "$S3_ENABLED" = "true" ]; then
        poetry run python -c "
try:
    from src.utils.s3_backup import backup_all_to_s3
    backup_all_to_s3()
    print('‚úÖ S3 backup (database + memes) completed successfully')
except Exception as e:
    print(f'‚ùå S3 backup failed: {e}')
    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ø–ª–æ–π –µ—Å–ª–∏ S3 –±—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è
"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  S3 backup disabled in .env, skipping S3 backup${NC}"
    fi
fi

# 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo -e "${YELLOW}üì¶ Installing/updating dependencies...${NC}"
poetry install

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Failed to install dependencies${NC}"
    exit 1
fi

# 6. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo -e "${YELLOW}üöÄ Starting bot...${NC}"
poetry run python -B no_fap.py &

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Bot started successfully${NC}"
    echo -e "${BLUE}üéâ Deployment completed successfully!${NC}"
else
    echo -e "${RED}‚ùå Failed to start bot${NC}"
    exit 1
fi

# 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
echo -e "${BLUE}üìä Deployment Summary:${NC}"
echo -e "  üì• Code updated: ${GREEN}‚úÖ${NC}"
echo -e "  üíæ Local backups: ${GREEN}‚úÖ${NC} (database + memes)"
echo -e "  ‚òÅÔ∏è  S3 backup: ${GREEN}‚úÖ${NC} (database + memes)"
echo -e "  üì¶ Dependencies: ${GREEN}‚úÖ${NC}"
echo -e "  üöÄ Bot started: ${GREEN}‚úÖ${NC}"
