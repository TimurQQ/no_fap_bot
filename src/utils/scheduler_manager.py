from apscheduler.triggers.cron import CronTrigger

from logger import noFapLogger


def update_logging_schedule(hour: int, minute: int) -> bool:
    try:
        from sheduler import scheduler

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
        job = scheduler.get_job("logging_job")
        if job:
            noFapLogger.info(f"üìã –¢–µ–∫—É—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–¥–∞—á–∏: {job.trigger}")
            noFapLogger.info(f"üìã –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time}")

        new_trigger = CronTrigger(hour=hour, minute=minute)
        scheduler.modify_job("logging_job", trigger=new_trigger)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updated_job = scheduler.get_job("logging_job")
        if updated_job:
            noFapLogger.info(f"‚úÖ –ù–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: {updated_job.trigger}")
            noFapLogger.info(f"‚úÖ –ù–æ–≤—ã–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {updated_job.next_run_time}")

        noFapLogger.info(
            f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—Ä–µ–º—è logDatabase –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d} (–ú–°–ö)"
        )
        return True
    except Exception as e:
        noFapLogger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False
