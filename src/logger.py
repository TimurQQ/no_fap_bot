import asyncio
import json
import logging
import os
import re
import shutil
from datetime import datetime, time
from logging.handlers import TimedRotatingFileHandler
from typing import Callable, Optional, Tuple

import aiogram
from singleton_decorator import singleton

from config.log_rotation_config import LogRotationConfig
from src.constants import (
    BACKUP_FOLDER,
    LOG_FILENAME,
    LOGS_FOLDER,
    NO_FAP_LOGGER_NAME,
    SCHEDULER_LOGGER_NAME,
)
from src.utils.json_encoder import EnhancedJSONEncoder


class NoFapTimedRotatingFileHandler(TimedRotatingFileHandler):
    def __init__(self, rotation_config: LogRotationConfig, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._logsSender = None
        self.rotation_config = rotation_config

    def setLogsSender(self, logsSender: Callable):
        self._logsSender = logsSender

    async def _send_log_file_to_admins(
        self, target_path: str, target_name: str, logger: logging.Logger
    ):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∞–º –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ backup"""
        try:
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ {target_name} –∞–¥–º–∏–Ω–∞–º")
            await self._logsSender(target_path)
            logger.info(f"‚úÖ –õ–æ–≥ {target_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º")

            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ backup
            if not os.path.exists(BACKUP_FOLDER):
                os.makedirs(BACKUP_FOLDER)
                logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ backup: {BACKUP_FOLDER}")

            backup_path = os.path.join(
                BACKUP_FOLDER, f"{target_name}-{datetime.now().timestamp()}"
            )
            shutil.move(target_path, backup_path)
            logger.info(
                f"üì§ –õ–æ–≥ {target_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ backup: {backup_path}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ {target_name}: {e}")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")

    def _find_latest_log_file(
        self, logger: logging.Logger
    ) -> Tuple[Optional[str], Optional[str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        target = sorted(os.listdir(LOGS_FOLDER))[-1]
        target_path = os.path.join(LOGS_FOLDER, target)
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {target}")

        if not os.path.exists(target_path):
            logger.error(f"‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_path}")
            return None, None

        return target, target_path

    def _schedule_log_sending(
        self, target_path: str, target_name: str, logger: logging.Logger
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –∏—Å–ø–æ–ª—å–∑—É—è asyncio.run"""
        try:
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ asyncio.run")
            asyncio.run(self._send_log_file_to_admins(target_path, target_name, logger))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

    def doRollover(self):
        super().doRollover()

        logger = logging.getLogger(NO_FAP_LOGGER_NAME)
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤")

        # Early return –µ—Å–ª–∏ logsSender –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not self._logsSender:
            logger.warning(
                "‚ö†Ô∏è logsSender –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –õ–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∞–º"
            )
            return

        logger.info("üì§ logsSender –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤")

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –ª–æ–≥–∞
        target_name, target_path = self._find_latest_log_file(logger)
        if not target_path:
            return

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        self._schedule_log_sending(target_path, target_name, logger)


@singleton
class NoFapLogger(object):
    _commandLogger = None
    _cronLogger = None

    @staticmethod
    def _turnOnConsoleLogging(logger: logging.Logger):
        formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")

        stream_handler = logging.StreamHandler()
        stream_handler.setLevel(logging.INFO)
        stream_handler.setFormatter(formatter)

        logger.addHandler(stream_handler)

    @staticmethod
    def _turnOffConsoleLogging(logger: logging.Logger):
        logger.propagate = False

    def set_console_logging(self, consoleLogging: bool):
        if consoleLogging:
            self._turnOnConsoleLogging(self._commandLogger)
            self._turnOnConsoleLogging(self._cronLogger)
        else:
            self._turnOffConsoleLogging(self._commandLogger)
            self._turnOffConsoleLogging(self._cronLogger)

    def __init__(self):
        self._commandLogger = logging.getLogger(NO_FAP_LOGGER_NAME)
        self._cronLogger = logging.getLogger(SCHEDULER_LOGGER_NAME)

        self._commandLogger.setLevel(logging.INFO)
        self._cronLogger.setLevel(logging.INFO)

        formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")

        self._rotation_config = LogRotationConfig()

        self._file_handler = NoFapTimedRotatingFileHandler(
            rotation_config=self._rotation_config,
            filename=os.path.join(LOGS_FOLDER, LOG_FILENAME),
            when="midnight",
            atTime=self._rotation_config.get_time_object(),
        )
        self._file_handler.setLevel(logging.INFO)
        self._file_handler.setFormatter(formatter)

        self._commandLogger.addHandler(self._file_handler)
        self._cronLogger.addHandler(self._file_handler)

    def setLoggerSender(self, loggerSender: Callable):
        self._file_handler.setLogsSender(loggerSender)
        self._commandLogger.info(
            f"‚úÖ logsSender —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {loggerSender.__name__ if hasattr(loggerSender, '__name__') else '—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–º–µ–Ω–∏'}"
        )

    def update_rotation_time(self, hour: int, minute: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
        try:
            if not self._rotation_config.set_rotation_time(hour, minute):
                return False

            self._file_handler.atTime = self._rotation_config.get_time_object()
            self._commandLogger.info(
                f"‚è∞ –í—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {self._rotation_config.format_time()}"
            )
            return True

        except Exception as e:
            self._commandLogger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—Ç–∞—Ü–∏–∏: {e}")
            return False

    def get_current_rotation_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
        return self._rotation_config.format_time()

    def info(self, text: str):
        self._commandLogger.info(text)

    def error(self, text: str):
        self._commandLogger.error(text)

    def warning(self, text: str):
        self._commandLogger.warning(text)

    def info_message(self, message: aiogram.types.Message):
        chat = message.chat
        text = message.text
        messageText = text if f'"{text}"' else message.content_type
        self.info(f'User {chat.username} ({chat.id}) send a message: "{messageText}"')

    def logDatabase(self, data):
        data_log = re.sub(
            r'"collectedMemes": \[[^]]*\],\s+',
            "",
            json.dumps(data, cls=EnhancedJSONEncoder, indent=4),
        )
        self.info(f"{data_log}")
