from dispatcher import dp, bot
from aiogram import types
from database import database
from commands import commands
import os
from src.constants import LOGS_FOLDER
from no_fap import send_logs

@dp.message_handler(is_admin=True, commands=['ban'])
async def ban_user(message: types.Message):
    args = message.get_args()
    if (len(args) == 0):
        await message.answer(f"Command args passes incorrectly")
        return
    whom = args.split()[0].split("@")[-1]
    uid = database.getUserIDFromNick(whom)
    if (uid is None):
        await message.answer(f"User with provided nickname doesn't exist")
        return
    database.update(uid, bannedFlag=True)
    await message.answer(f"User with nick @{whom} was banned by you :)")

@dp.message_handler(is_admin=True, commands=['unban'])
async def unban_user(message: types.Message):
    args = message.get_args()
    if (len(args) == 0):
        await message.answer(f"Command args passes incorrectly")
        return
    whom = args.split()[0].split("@")[-1]
    uid = database.getUserIDFromNick(whom)
    if (uid is None):
        await message.answer(f"User with provided nickname doesn't exist")
        return
    database.update(uid, bannedFlag=False)
    await message.answer(f"User with nick @{whom} was unbanned by you :)")

@dp.message_handler(is_admin=False, commands=['ban', 'unban'])
async def no_admin_rights_handler(message: types.Message):
    await message.answer(f"You don't have admin rights to do /{message.get_command()}")

@dp.message_handler(commands=[commands.BlacklistCommand])
async def get_black_list(message: types.Message):
    blacklisted_users = database.getBlackList()
    
    if not blacklisted_users:
        await message.answer("BlackList is empty ‚úÖ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ usernames
    blacklist_lines = []
    for user in blacklisted_users:
        username = user['username']
        uid = user['uid']
        blacklist_lines.append(f"@{username} (ID: {uid}) is blocked")
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    full_text = f"BlackList ({len(blacklisted_users)} users):\n\n" + "\n".join(blacklist_lines)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    chunk_size = 4000
    for i in range(0, len(full_text), chunk_size):
        chunk = full_text[i:i + chunk_size]
        if i == 0:
            await message.answer(chunk)
        else:
            await message.answer(f"BlackList (continued):\n{chunk}")

@dp.message_handler(is_admin=True, commands=['get_logs'])
async def send_logs_manually(message: types.Message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞–º"""
    try:
        # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        log_files = [f for f in os.listdir(LOGS_FOLDER) 
                    if f.startswith('log.') and os.path.isfile(os.path.join(LOGS_FOLDER, f))]
        
        if not log_files:
            await message.answer("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
        latest_log = sorted(log_files)[-1]
        log_path = os.path.join(LOGS_FOLDER, latest_log)
        
        await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥ —Ñ–∞–π–ª: {latest_log}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥
        await send_logs(log_path)
        
        await message.answer(f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª {latest_log} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

@dp.message_handler(is_admin=False, commands=['get_logs'])
async def send_logs_no_admin(message: types.Message):
    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /get_logs")
