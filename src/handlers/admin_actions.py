import os

from aiogram import types

from commands import commands
from database import database
from dispatcher import dp
from logger import noFapLogger
from sheduler import update_logging_schedule
from src.constants import LOGS_FOLDER
from src.utils.log_sender import send_logs


@dp.message_handler(is_admin=True, commands=["ban"])
async def ban_user(message: types.Message):
    args = message.get_args()
    if len(args) == 0:
        await message.answer(f"Command args passes incorrectly")
        return
    whom = args.split()[0].split("@")[-1]
    uid = database.getUserIDFromNick(whom)
    if uid is None:
        await message.answer(f"User with provided nickname doesn't exist")
        return
    database.update(uid, bannedFlag=True)
    await message.answer(f"User with nick @{whom} was banned by you :)")


@dp.message_handler(is_admin=True, commands=["unban"])
async def unban_user(message: types.Message):
    args = message.get_args()
    if len(args) == 0:
        await message.answer(f"Command args passes incorrectly")
        return
    whom = args.split()[0].split("@")[-1]
    uid = database.getUserIDFromNick(whom)
    if uid is None:
        await message.answer(f"User with provided nickname doesn't exist")
        return
    database.update(uid, bannedFlag=False)
    await message.answer(f"User with nick @{whom} was unbanned by you :)")


@dp.message_handler(is_admin=False, commands=["ban", "unban"])
async def no_admin_rights_handler(message: types.Message):
    await message.answer(f"You don't have admin rights to do /{message.get_command()}")


@dp.message_handler(commands=[commands.BlacklistCommand])
async def get_black_list(message: types.Message):
    blacklisted_users = database.getBlackList()

    if not blacklisted_users:
        await message.answer("BlackList is empty ‚úÖ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ usernames
    blacklist_lines = []
    for user in blacklisted_users:
        username = user["username"]
        uid = user["uid"]
        blacklist_lines.append(f"@{username} (ID: {uid}) is blocked")

    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    full_text = f"BlackList ({len(blacklisted_users)} users):\n\n" + "\n".join(
        blacklist_lines
    )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    chunk_size = 4000
    for i in range(0, len(full_text), chunk_size):
        chunk = full_text[i : i + chunk_size]
        if i == 0:
            await message.answer(chunk)
        else:
            await message.answer(f"BlackList (continued):\n{chunk}")


@dp.message_handler(is_admin=True, commands=["get_logs"])
async def send_logs_manually(message: types.Message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞–º"""
    try:
        # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        log_files = [
            f
            for f in os.listdir(LOGS_FOLDER)
            if f.startswith("log.") and os.path.isfile(os.path.join(LOGS_FOLDER, f))
        ]

        if not log_files:
            await message.answer("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
        latest_log = sorted(log_files)[-1]
        log_path = os.path.join(LOGS_FOLDER, latest_log)

        await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥ —Ñ–∞–π–ª: {latest_log}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥
        await send_logs(log_path)

        await message.answer(
            f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª {latest_log} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º!"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")


@dp.message_handler(is_admin=False, commands=["get_logs"])
async def send_logs_no_admin(message: types.Message):
    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /get_logs")


@dp.message_handler(is_admin=True, commands=["set_log_time"])
async def set_log_rotation_time(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤"""
    args = message.get_args()

    if not args:
        current_time = noFapLogger.get_current_rotation_time()
        await message.answer(
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {current_time} (–ú–°–ö)\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_log_time –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä: /set_log_time 22:30\n\n"
            f"üìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ß–∞—Å: 00-23\n"
            f"‚Ä¢ –ú–∏–Ω—É—Ç–∞: 00-59\n"
            f"üåç –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É (–ú–°–ö)"
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç HH:MM)
    try:
        time_parts = args.strip().split(":")
        if len(time_parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        hour = int(time_parts[0])
        minute = int(time_parts[1])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not (0 <= hour <= 23):
            await message.answer(f"‚ùå –ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –ø–æ–ª—É—á–µ–Ω: {hour:02d}")
            return

        if not (0 <= minute <= 59):
            await message.answer(
                f"‚ùå –ú–∏–Ω—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 00 –¥–æ 59, –ø–æ–ª—É—á–µ–Ω–∞: {minute:02d}"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        logger_updated = noFapLogger.update_rotation_time(hour, minute)
        scheduler_updated = update_logging_schedule(hour, minute)

        if logger_updated and scheduler_updated:
            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {hour:02d}:{minute:02d} (–ú–°–ö)\n"
                f"üì§ –õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è\n"
                f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)"
            )
        elif logger_updated:
            await message.answer(
                f"‚ö†Ô∏è –í—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {hour:02d}:{minute:02d} (–ú–°–ö)\n"
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n"
                f"üîÑ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤")

    except ValueError:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä: /set_log_time 22:30\n"
            f"‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É (–ú–°–ö)"
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(is_admin=True, commands=["get_log_time"])
async def get_log_rotation_time(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
    try:
        current_time = noFapLogger.get_current_rotation_time()
        await message.answer(
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {current_time} (–ú–°–ö)\n\n"
            f"üì§ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è\n"
            f"üîß –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_log_time –ß–ß:–ú–ú\n"
            f"üåç –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—Ç–∞—Ü–∏–∏: {e}")


@dp.message_handler(is_admin=True, commands=["admin_help"])
async def admin_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = (
        "üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´**\n\n"
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**\n"
        "‚Ä¢ `/ban @username` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ `/unban @username` - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üìã **–õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n"
        "‚Ä¢ `/get_logs` - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤\n"
        "‚Ä¢ `/set_log_time –ß–ß:–ú–ú` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ (–ú–°–ö)\n"
        "‚Ä¢ `/get_log_time` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤\n\n"
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞:**\n"
        "‚Ä¢ `/admin_help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üåç –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É (–ú–°–ö)\n"
        "‚ö†Ô∏è –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
    )

    await message.answer(help_text, parse_mode="Markdown")


@dp.message_handler(
    is_admin=False, commands=["set_log_time", "get_log_time", "admin_help"]
)
async def log_time_no_admin(message: types.Message):
    """–ó–∞–ø—Ä–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤"""
    command = message.get_command()
    await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /{command}")
